{"version":3,"file":"stimulus.js","sources":["../dist/stimulus.js"],"sourcesContent":["/*\nStimulus 3.2.1\nCopyright Â© 2023 Basecamp, LLC\n */\nclass EventListener {\n    constructor(eventTarget, eventName, eventOptions) {\n        this.eventTarget = eventTarget;\n        this.eventName = eventName;\n        this.eventOptions = eventOptions;\n        this.unorderedBindings = new Set();\n    }\n    connect() {\n        this.eventTarget.addEventListener(this.eventName, this, this.eventOptions);\n    }\n    disconnect() {\n        this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions);\n    }\n    bindingConnected(binding) {\n        this.unorderedBindings.add(binding);\n    }\n    bindingDisconnected(binding) {\n        this.unorderedBindings.delete(binding);\n    }\n    handleEvent(event) {\n        const extendedEvent = extendEvent(event);\n        for (const binding of this.bindings) {\n            if (extendedEvent.immediatePropagationStopped) {\n                break;\n            }\n            else {\n                binding.handleEvent(extendedEvent);\n            }\n        }\n    }\n    hasBindings() {\n        return this.unorderedBindings.size > 0;\n    }\n    get bindings() {\n        return Array.from(this.unorderedBindings).sort((left, right) => {\n            const leftIndex = left.index, rightIndex = right.index;\n            return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0;\n        });\n    }\n}\nfunction extendEvent(event) {\n    if (\"immediatePropagationStopped\" in event) {\n        return event;\n    }\n    else {\n        const { stopImmediatePropagation } = event;\n        return Object.assign(event, {\n            immediatePropagationStopped: false,\n            stopImmediatePropagation() {\n                this.immediatePropagationStopped = true;\n                stopImmediatePropagation.call(this);\n            },\n        });\n    }\n}\n\nclass Dispatcher {\n    constructor(application) {\n        this.application = application;\n        this.eventListenerMaps = new Map();\n        this.started = false;\n    }\n    start() {\n        if (!this.started) {\n            this.started = true;\n            this.eventListeners.forEach((eventListener) => eventListener.connect());\n        }\n    }\n    stop() {\n        if (this.started) {\n            this.started = false;\n            this.eventListeners.forEach((eventListener) => eventListener.disconnect());\n        }\n    }\n    get eventListeners() {\n        return Array.from(this.eventListenerMaps.values()).reduce((listeners, map) => listeners.concat(Array.from(map.values())), []);\n    }\n    bindingConnected(binding) {\n        this.fetchEventListenerForBinding(binding).bindingConnected(binding);\n    }\n    bindingDisconnected(binding, clearEventListeners = false) {\n        this.fetchEventListenerForBinding(binding).bindingDisconnected(binding);\n        if (clearEventListeners)\n            this.clearEventListenersForBinding(binding);\n    }\n    handleError(error, message, detail = {}) {\n        this.application.handleError(error, `Error ${message}`, detail);\n    }\n    clearEventListenersForBinding(binding) {\n        const eventListener = this.fetchEventListenerForBinding(binding);\n        if (!eventListener.hasBindings()) {\n            eventListener.disconnect();\n            this.removeMappedEventListenerFor(binding);\n        }\n    }\n    removeMappedEventListenerFor(binding) {\n        const { eventTarget, eventName, eventOptions } = binding;\n        const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);\n        const cacheKey = this.cacheKey(eventName, eventOptions);\n        eventListenerMap.delete(cacheKey);\n        if (eventListenerMap.size == 0)\n            this.eventListenerMaps.delete(eventTarget);\n    }\n    fetchEventListenerForBinding(binding) {\n        const { eventTarget, eventName, eventOptions } = binding;\n        return this.fetchEventListener(eventTarget, eventName, eventOptions);\n    }\n    fetchEventListener(eventTarget, eventName, eventOptions) {\n        const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);\n        const cacheKey = this.cacheKey(eventName, eventOptions);\n        let eventListener = eventListenerMap.get(cacheKey);\n        if (!eventListener) {\n            eventListener = this.createEventListener(eventTarget, eventName, eventOptions);\n            eventListenerMap.set(cacheKey, eventListener);\n        }\n        return eventListener;\n    }\n    createEventListener(eventTarget, eventName, eventOptions) {\n        const eventListener = new EventListener(eventTarget, eventName, eventOptions);\n        if (this.started) {\n            eventListener.connect();\n        }\n        return eventListener;\n    }\n    fetchEventListenerMapForEventTarget(eventTarget) {\n        let eventListenerMap = this.eventListenerMaps.get(eventTarget);\n        if (!eventListenerMap) {\n            eventListenerMap = new Map();\n            this.eventListenerMaps.set(eventTarget, eventListenerMap);\n        }\n        return eventListenerMap;\n    }\n    cacheKey(eventName, eventOptions) {\n        const parts = [eventName];\n        Object.keys(eventOptions)\n            .sort()\n            .forEach((key) => {\n            parts.push(`${eventOptions[key] ? \"\" : \"!\"}${key}`);\n        });\n        return parts.join(\":\");\n    }\n}\n\nconst defaultActionDescriptorFilters = {\n    stop({ event, value }) {\n        if (value)\n            event.stopPropagation();\n        return true;\n    },\n    prevent({ event, value }) {\n        if (value)\n            event.preventDefault();\n        return true;\n    },\n    self({ event, value, element }) {\n        if (value) {\n            return element === event.target;\n        }\n        else {\n            return true;\n        }\n    },\n};\nconst descriptorPattern = /^(?:(?:([^.]+?)\\+)?(.+?)(?:\\.(.+?))?(?:@(window|document))?->)?(.+?)(?:#([^:]+?))(?::(.+))?$/;\nfunction parseActionDescriptorString(descriptorString) {\n    const source = descriptorString.trim();\n    const matches = source.match(descriptorPattern) || [];\n    let eventName = matches[2];\n    let keyFilter = matches[3];\n    if (keyFilter && ![\"keydown\", \"keyup\", \"keypress\"].includes(eventName)) {\n        eventName += `.${keyFilter}`;\n        keyFilter = \"\";\n    }\n    return {\n        eventTarget: parseEventTarget(matches[4]),\n        eventName,\n        eventOptions: matches[7] ? parseEventOptions(matches[7]) : {},\n        identifier: matches[5],\n        methodName: matches[6],\n        keyFilter: matches[1] || keyFilter,\n    };\n}\nfunction parseEventTarget(eventTargetName) {\n    if (eventTargetName == \"window\") {\n        return window;\n    }\n    else if (eventTargetName == \"document\") {\n        return document;\n    }\n}\nfunction parseEventOptions(eventOptions) {\n    return eventOptions\n        .split(\":\")\n        .reduce((options, token) => Object.assign(options, { [token.replace(/^!/, \"\")]: !/^!/.test(token) }), {});\n}\nfunction stringifyEventTarget(eventTarget) {\n    if (eventTarget == window) {\n        return \"window\";\n    }\n    else if (eventTarget == document) {\n        return \"document\";\n    }\n}\n\nfunction camelize(value) {\n    return value.replace(/(?:[_-])([a-z0-9])/g, (_, char) => char.toUpperCase());\n}\nfunction namespaceCamelize(value) {\n    return camelize(value.replace(/--/g, \"-\").replace(/__/g, \"_\"));\n}\nfunction capitalize(value) {\n    return value.charAt(0).toUpperCase() + value.slice(1);\n}\nfunction dasherize(value) {\n    return value.replace(/([A-Z])/g, (_, char) => `-${char.toLowerCase()}`);\n}\nfunction tokenize(value) {\n    return value.match(/[^\\s]+/g) || [];\n}\n\nfunction isSomething(object) {\n    return object !== null && object !== undefined;\n}\nfunction hasProperty(object, property) {\n    return Object.prototype.hasOwnProperty.call(object, property);\n}\n\nconst allModifiers = [\"meta\", \"ctrl\", \"alt\", \"shift\"];\nclass Action {\n    constructor(element, index, descriptor, schema) {\n        this.element = element;\n        this.index = index;\n        this.eventTarget = descriptor.eventTarget || element;\n        this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error(\"missing event name\");\n        this.eventOptions = descriptor.eventOptions || {};\n        this.identifier = descriptor.identifier || error(\"missing identifier\");\n        this.methodName = descriptor.methodName || error(\"missing method name\");\n        this.keyFilter = descriptor.keyFilter || \"\";\n        this.schema = schema;\n    }\n    static forToken(token, schema) {\n        return new this(token.element, token.index, parseActionDescriptorString(token.content), schema);\n    }\n    toString() {\n        const eventFilter = this.keyFilter ? `.${this.keyFilter}` : \"\";\n        const eventTarget = this.eventTargetName ? `@${this.eventTargetName}` : \"\";\n        return `${this.eventName}${eventFilter}${eventTarget}->${this.identifier}#${this.methodName}`;\n    }\n    shouldIgnoreKeyboardEvent(event) {\n        if (!this.keyFilter) {\n            return false;\n        }\n        const filters = this.keyFilter.split(\"+\");\n        if (this.keyFilterDissatisfied(event, filters)) {\n            return true;\n        }\n        const standardFilter = filters.filter((key) => !allModifiers.includes(key))[0];\n        if (!standardFilter) {\n            return false;\n        }\n        if (!hasProperty(this.keyMappings, standardFilter)) {\n            error(`contains unknown key filter: ${this.keyFilter}`);\n        }\n        return this.keyMappings[standardFilter].toLowerCase() !== event.key.toLowerCase();\n    }\n    shouldIgnoreMouseEvent(event) {\n        if (!this.keyFilter) {\n            return false;\n        }\n        const filters = [this.keyFilter];\n        if (this.keyFilterDissatisfied(event, filters)) {\n            return true;\n        }\n        return false;\n    }\n    get params() {\n        const params = {};\n        const pattern = new RegExp(`^data-${this.identifier}-(.+)-param$`, \"i\");\n        for (const { name, value } of Array.from(this.element.attributes)) {\n            const match = name.match(pattern);\n            const key = match && match[1];\n            if (key) {\n                params[camelize(key)] = typecast(value);\n            }\n        }\n        return params;\n    }\n    get eventTargetName() {\n        return stringifyEventTarget(this.eventTarget);\n    }\n    get keyMappings() {\n        return this.schema.keyMappings;\n    }\n    keyFilterDissatisfied(event, filters) {\n        const [meta, ctrl, alt, shift] = allModifiers.map((modifier) => filters.includes(modifier));\n        return event.metaKey !== meta || event.ctrlKey !== ctrl || event.altKey !== alt || event.shiftKey !== shift;\n    }\n}\nconst defaultEventNames = {\n    a: () => \"click\",\n    button: () => \"click\",\n    form: () => \"submit\",\n    details: () => \"toggle\",\n    input: (e) => (e.getAttribute(\"type\") == \"submit\" ? \"click\" : \"input\"),\n    select: () => \"change\",\n    textarea: () => \"input\",\n};\nfunction getDefaultEventNameForElement(element) {\n    const tagName = element.tagName.toLowerCase();\n    if (tagName in defaultEventNames) {\n        return defaultEventNames[tagName](element);\n    }\n}\nfunction error(message) {\n    throw new Error(message);\n}\nfunction typecast(value) {\n    try {\n        return JSON.parse(value);\n    }\n    catch (o_O) {\n        return value;\n    }\n}\n\nclass Binding {\n    constructor(context, action) {\n        this.context = context;\n        this.action = action;\n    }\n    get index() {\n        return this.action.index;\n    }\n    get eventTarget() {\n        return this.action.eventTarget;\n    }\n    get eventOptions() {\n        return this.action.eventOptions;\n    }\n    get identifier() {\n        return this.context.identifier;\n    }\n    handleEvent(event) {\n        const actionEvent = this.prepareActionEvent(event);\n        if (this.willBeInvokedByEvent(event) && this.applyEventModifiers(actionEvent)) {\n            this.invokeWithEvent(actionEvent);\n        }\n    }\n    get eventName() {\n        return this.action.eventName;\n    }\n    get method() {\n        const method = this.controller[this.methodName];\n        if (typeof method == \"function\") {\n            return method;\n        }\n        throw new Error(`Action \"${this.action}\" references undefined method \"${this.methodName}\"`);\n    }\n    applyEventModifiers(event) {\n        const { element } = this.action;\n        const { actionDescriptorFilters } = this.context.application;\n        const { controller } = this.context;\n        let passes = true;\n        for (const [name, value] of Object.entries(this.eventOptions)) {\n            if (name in actionDescriptorFilters) {\n                const filter = actionDescriptorFilters[name];\n                passes = passes && filter({ name, value, event, element, controller });\n            }\n            else {\n                continue;\n            }\n        }\n        return passes;\n    }\n    prepareActionEvent(event) {\n        return Object.assign(event, { params: this.action.params });\n    }\n    invokeWithEvent(event) {\n        const { target, currentTarget } = event;\n        try {\n            this.method.call(this.controller, event);\n            this.context.logDebugActivity(this.methodName, { event, target, currentTarget, action: this.methodName });\n        }\n        catch (error) {\n            const { identifier, controller, element, index } = this;\n            const detail = { identifier, controller, element, index, event };\n            this.context.handleError(error, `invoking action \"${this.action}\"`, detail);\n        }\n    }\n    willBeInvokedByEvent(event) {\n        const eventTarget = event.target;\n        if (event instanceof KeyboardEvent && this.action.shouldIgnoreKeyboardEvent(event)) {\n            return false;\n        }\n        if (event instanceof MouseEvent && this.action.shouldIgnoreMouseEvent(event)) {\n            return false;\n        }\n        if (this.element === eventTarget) {\n            return true;\n        }\n        else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {\n            return this.scope.containsElement(eventTarget);\n        }\n        else {\n            return this.scope.containsElement(this.action.element);\n        }\n    }\n    get controller() {\n        return this.context.controller;\n    }\n    get methodName() {\n        return this.action.methodName;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get scope() {\n        return this.context.scope;\n    }\n}\n\nclass ElementObserver {\n    constructor(element, delegate) {\n        this.mutationObserverInit = { attributes: true, childList: true, subtree: true };\n        this.element = element;\n        this.started = false;\n        this.delegate = delegate;\n        this.elements = new Set();\n        this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));\n    }\n    start() {\n        if (!this.started) {\n            this.started = true;\n            this.mutationObserver.observe(this.element, this.mutationObserverInit);\n            this.refresh();\n        }\n    }\n    pause(callback) {\n        if (this.started) {\n            this.mutationObserver.disconnect();\n            this.started = false;\n        }\n        callback();\n        if (!this.started) {\n            this.mutationObserver.observe(this.element, this.mutationObserverInit);\n            this.started = true;\n        }\n    }\n    stop() {\n        if (this.started) {\n            this.mutationObserver.takeRecords();\n            this.mutationObserver.disconnect();\n            this.started = false;\n        }\n    }\n    refresh() {\n        if (this.started) {\n            const matches = new Set(this.matchElementsInTree());\n            for (const element of Array.from(this.elements)) {\n                if (!matches.has(element)) {\n                    this.removeElement(element);\n                }\n            }\n            for (const element of Array.from(matches)) {\n                this.addElement(element);\n            }\n        }\n    }\n    processMutations(mutations) {\n        if (this.started) {\n            for (const mutation of mutations) {\n                this.processMutation(mutation);\n            }\n        }\n    }\n    processMutation(mutation) {\n        if (mutation.type == \"attributes\") {\n            this.processAttributeChange(mutation.target, mutation.attributeName);\n        }\n        else if (mutation.type == \"childList\") {\n            this.processRemovedNodes(mutation.removedNodes);\n            this.processAddedNodes(mutation.addedNodes);\n        }\n    }\n    processAttributeChange(element, attributeName) {\n        if (this.elements.has(element)) {\n            if (this.delegate.elementAttributeChanged && this.matchElement(element)) {\n                this.delegate.elementAttributeChanged(element, attributeName);\n            }\n            else {\n                this.removeElement(element);\n            }\n        }\n        else if (this.matchElement(element)) {\n            this.addElement(element);\n        }\n    }\n    processRemovedNodes(nodes) {\n        for (const node of Array.from(nodes)) {\n            const element = this.elementFromNode(node);\n            if (element) {\n                this.processTree(element, this.removeElement);\n            }\n        }\n    }\n    processAddedNodes(nodes) {\n        for (const node of Array.from(nodes)) {\n            const element = this.elementFromNode(node);\n            if (element && this.elementIsActive(element)) {\n                this.processTree(element, this.addElement);\n            }\n        }\n    }\n    matchElement(element) {\n        return this.delegate.matchElement(element);\n    }\n    matchElementsInTree(tree = this.element) {\n        return this.delegate.matchElementsInTree(tree);\n    }\n    processTree(tree, processor) {\n        for (const element of this.matchElementsInTree(tree)) {\n            processor.call(this, element);\n        }\n    }\n    elementFromNode(node) {\n        if (node.nodeType == Node.ELEMENT_NODE) {\n            return node;\n        }\n    }\n    elementIsActive(element) {\n        if (element.isConnected != this.element.isConnected) {\n            return false;\n        }\n        else {\n            return this.element.contains(element);\n        }\n    }\n    addElement(element) {\n        if (!this.elements.has(element)) {\n            if (this.elementIsActive(element)) {\n                this.elements.add(element);\n                if (this.delegate.elementMatched) {\n                    this.delegate.elementMatched(element);\n                }\n            }\n        }\n    }\n    removeElement(element) {\n        if (this.elements.has(element)) {\n            this.elements.delete(element);\n            if (this.delegate.elementUnmatched) {\n                this.delegate.elementUnmatched(element);\n            }\n        }\n    }\n}\n\nclass AttributeObserver {\n    constructor(element, attributeName, delegate) {\n        this.attributeName = attributeName;\n        this.delegate = delegate;\n        this.elementObserver = new ElementObserver(element, this);\n    }\n    get element() {\n        return this.elementObserver.element;\n    }\n    get selector() {\n        return `[${this.attributeName}]`;\n    }\n    start() {\n        this.elementObserver.start();\n    }\n    pause(callback) {\n        this.elementObserver.pause(callback);\n    }\n    stop() {\n        this.elementObserver.stop();\n    }\n    refresh() {\n        this.elementObserver.refresh();\n    }\n    get started() {\n        return this.elementObserver.started;\n    }\n    matchElement(element) {\n        return element.hasAttribute(this.attributeName);\n    }\n    matchElementsInTree(tree) {\n        const match = this.matchElement(tree) ? [tree] : [];\n        const matches = Array.from(tree.querySelectorAll(this.selector));\n        return match.concat(matches);\n    }\n    elementMatched(element) {\n        if (this.delegate.elementMatchedAttribute) {\n            this.delegate.elementMatchedAttribute(element, this.attributeName);\n        }\n    }\n    elementUnmatched(element) {\n        if (this.delegate.elementUnmatchedAttribute) {\n            this.delegate.elementUnmatchedAttribute(element, this.attributeName);\n        }\n    }\n    elementAttributeChanged(element, attributeName) {\n        if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {\n            this.delegate.elementAttributeValueChanged(element, attributeName);\n        }\n    }\n}\n\nfunction add(map, key, value) {\n    fetch(map, key).add(value);\n}\nfunction del(map, key, value) {\n    fetch(map, key).delete(value);\n    prune(map, key);\n}\nfunction fetch(map, key) {\n    let values = map.get(key);\n    if (!values) {\n        values = new Set();\n        map.set(key, values);\n    }\n    return values;\n}\nfunction prune(map, key) {\n    const values = map.get(key);\n    if (values != null && values.size == 0) {\n        map.delete(key);\n    }\n}\n\nclass Multimap {\n    constructor() {\n        this.valuesByKey = new Map();\n    }\n    get keys() {\n        return Array.from(this.valuesByKey.keys());\n    }\n    get values() {\n        const sets = Array.from(this.valuesByKey.values());\n        return sets.reduce((values, set) => values.concat(Array.from(set)), []);\n    }\n    get size() {\n        const sets = Array.from(this.valuesByKey.values());\n        return sets.reduce((size, set) => size + set.size, 0);\n    }\n    add(key, value) {\n        add(this.valuesByKey, key, value);\n    }\n    delete(key, value) {\n        del(this.valuesByKey, key, value);\n    }\n    has(key, value) {\n        const values = this.valuesByKey.get(key);\n        return values != null && values.has(value);\n    }\n    hasKey(key) {\n        return this.valuesByKey.has(key);\n    }\n    hasValue(value) {\n        const sets = Array.from(this.valuesByKey.values());\n        return sets.some((set) => set.has(value));\n    }\n    getValuesForKey(key) {\n        const values = this.valuesByKey.get(key);\n        return values ? Array.from(values) : [];\n    }\n    getKeysForValue(value) {\n        return Array.from(this.valuesByKey)\n            .filter(([_key, values]) => values.has(value))\n            .map(([key, _values]) => key);\n    }\n}\n\nclass IndexedMultimap extends Multimap {\n    constructor() {\n        super();\n        this.keysByValue = new Map();\n    }\n    get values() {\n        return Array.from(this.keysByValue.keys());\n    }\n    add(key, value) {\n        super.add(key, value);\n        add(this.keysByValue, value, key);\n    }\n    delete(key, value) {\n        super.delete(key, value);\n        del(this.keysByValue, value, key);\n    }\n    hasValue(value) {\n        return this.keysByValue.has(value);\n    }\n    getKeysForValue(value) {\n        const set = this.keysByValue.get(value);\n        return set ? Array.from(set) : [];\n    }\n}\n\nclass SelectorObserver {\n    constructor(element, selector, delegate, details) {\n        this._selector = selector;\n        this.details = details;\n        this.elementObserver = new ElementObserver(element, this);\n        this.delegate = delegate;\n        this.matchesByElement = new Multimap();\n    }\n    get started() {\n        return this.elementObserver.started;\n    }\n    get selector() {\n        return this._selector;\n    }\n    set selector(selector) {\n        this._selector = selector;\n        this.refresh();\n    }\n    start() {\n        this.elementObserver.start();\n    }\n    pause(callback) {\n        this.elementObserver.pause(callback);\n    }\n    stop() {\n        this.elementObserver.stop();\n    }\n    refresh() {\n        this.elementObserver.refresh();\n    }\n    get element() {\n        return this.elementObserver.element;\n    }\n    matchElement(element) {\n        const { selector } = this;\n        if (selector) {\n            const matches = element.matches(selector);\n            if (this.delegate.selectorMatchElement) {\n                return matches && this.delegate.selectorMatchElement(element, this.details);\n            }\n            return matches;\n        }\n        else {\n            return false;\n        }\n    }\n    matchElementsInTree(tree) {\n        const { selector } = this;\n        if (selector) {\n            const match = this.matchElement(tree) ? [tree] : [];\n            const matches = Array.from(tree.querySelectorAll(selector)).filter((match) => this.matchElement(match));\n            return match.concat(matches);\n        }\n        else {\n            return [];\n        }\n    }\n    elementMatched(element) {\n        const { selector } = this;\n        if (selector) {\n            this.selectorMatched(element, selector);\n        }\n    }\n    elementUnmatched(element) {\n        const selectors = this.matchesByElement.getKeysForValue(element);\n        for (const selector of selectors) {\n            this.selectorUnmatched(element, selector);\n        }\n    }\n    elementAttributeChanged(element, _attributeName) {\n        const { selector } = this;\n        if (selector) {\n            const matches = this.matchElement(element);\n            const matchedBefore = this.matchesByElement.has(selector, element);\n            if (matches && !matchedBefore) {\n                this.selectorMatched(element, selector);\n            }\n            else if (!matches && matchedBefore) {\n                this.selectorUnmatched(element, selector);\n            }\n        }\n    }\n    selectorMatched(element, selector) {\n        this.delegate.selectorMatched(element, selector, this.details);\n        this.matchesByElement.add(selector, element);\n    }\n    selectorUnmatched(element, selector) {\n        this.delegate.selectorUnmatched(element, selector, this.details);\n        this.matchesByElement.delete(selector, element);\n    }\n}\n\nclass StringMapObserver {\n    constructor(element, delegate) {\n        this.element = element;\n        this.delegate = delegate;\n        this.started = false;\n        this.stringMap = new Map();\n        this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));\n    }\n    start() {\n        if (!this.started) {\n            this.started = true;\n            this.mutationObserver.observe(this.element, { attributes: true, attributeOldValue: true });\n            this.refresh();\n        }\n    }\n    stop() {\n        if (this.started) {\n            this.mutationObserver.takeRecords();\n            this.mutationObserver.disconnect();\n            this.started = false;\n        }\n    }\n    refresh() {\n        if (this.started) {\n            for (const attributeName of this.knownAttributeNames) {\n                this.refreshAttribute(attributeName, null);\n            }\n        }\n    }\n    processMutations(mutations) {\n        if (this.started) {\n            for (const mutation of mutations) {\n                this.processMutation(mutation);\n            }\n        }\n    }\n    processMutation(mutation) {\n        const attributeName = mutation.attributeName;\n        if (attributeName) {\n            this.refreshAttribute(attributeName, mutation.oldValue);\n        }\n    }\n    refreshAttribute(attributeName, oldValue) {\n        const key = this.delegate.getStringMapKeyForAttribute(attributeName);\n        if (key != null) {\n            if (!this.stringMap.has(attributeName)) {\n                this.stringMapKeyAdded(key, attributeName);\n            }\n            const value = this.element.getAttribute(attributeName);\n            if (this.stringMap.get(attributeName) != value) {\n                this.stringMapValueChanged(value, key, oldValue);\n            }\n            if (value == null) {\n                const oldValue = this.stringMap.get(attributeName);\n                this.stringMap.delete(attributeName);\n                if (oldValue)\n                    this.stringMapKeyRemoved(key, attributeName, oldValue);\n            }\n            else {\n                this.stringMap.set(attributeName, value);\n            }\n        }\n    }\n    stringMapKeyAdded(key, attributeName) {\n        if (this.delegate.stringMapKeyAdded) {\n            this.delegate.stringMapKeyAdded(key, attributeName);\n        }\n    }\n    stringMapValueChanged(value, key, oldValue) {\n        if (this.delegate.stringMapValueChanged) {\n            this.delegate.stringMapValueChanged(value, key, oldValue);\n        }\n    }\n    stringMapKeyRemoved(key, attributeName, oldValue) {\n        if (this.delegate.stringMapKeyRemoved) {\n            this.delegate.stringMapKeyRemoved(key, attributeName, oldValue);\n        }\n    }\n    get knownAttributeNames() {\n        return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)));\n    }\n    get currentAttributeNames() {\n        return Array.from(this.element.attributes).map((attribute) => attribute.name);\n    }\n    get recordedAttributeNames() {\n        return Array.from(this.stringMap.keys());\n    }\n}\n\nclass TokenListObserver {\n    constructor(element, attributeName, delegate) {\n        this.attributeObserver = new AttributeObserver(element, attributeName, this);\n        this.delegate = delegate;\n        this.tokensByElement = new Multimap();\n    }\n    get started() {\n        return this.attributeObserver.started;\n    }\n    start() {\n        this.attributeObserver.start();\n    }\n    pause(callback) {\n        this.attributeObserver.pause(callback);\n    }\n    stop() {\n        this.attributeObserver.stop();\n    }\n    refresh() {\n        this.attributeObserver.refresh();\n    }\n    get element() {\n        return this.attributeObserver.element;\n    }\n    get attributeName() {\n        return this.attributeObserver.attributeName;\n    }\n    elementMatchedAttribute(element) {\n        this.tokensMatched(this.readTokensForElement(element));\n    }\n    elementAttributeValueChanged(element) {\n        const [unmatchedTokens, matchedTokens] = this.refreshTokensForElement(element);\n        this.tokensUnmatched(unmatchedTokens);\n        this.tokensMatched(matchedTokens);\n    }\n    elementUnmatchedAttribute(element) {\n        this.tokensUnmatched(this.tokensByElement.getValuesForKey(element));\n    }\n    tokensMatched(tokens) {\n        tokens.forEach((token) => this.tokenMatched(token));\n    }\n    tokensUnmatched(tokens) {\n        tokens.forEach((token) => this.tokenUnmatched(token));\n    }\n    tokenMatched(token) {\n        this.delegate.tokenMatched(token);\n        this.tokensByElement.add(token.element, token);\n    }\n    tokenUnmatched(token) {\n        this.delegate.tokenUnmatched(token);\n        this.tokensByElement.delete(token.element, token);\n    }\n    refreshTokensForElement(element) {\n        const previousTokens = this.tokensByElement.getValuesForKey(element);\n        const currentTokens = this.readTokensForElement(element);\n        const firstDifferingIndex = zip(previousTokens, currentTokens).findIndex(([previousToken, currentToken]) => !tokensAreEqual(previousToken, currentToken));\n        if (firstDifferingIndex == -1) {\n            return [[], []];\n        }\n        else {\n            return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)];\n        }\n    }\n    readTokensForElement(element) {\n        const attributeName = this.attributeName;\n        const tokenString = element.getAttribute(attributeName) || \"\";\n        return parseTokenString(tokenString, element, attributeName);\n    }\n}\nfunction parseTokenString(tokenString, element, attributeName) {\n    return tokenString\n        .trim()\n        .split(/\\s+/)\n        .filter((content) => content.length)\n        .map((content, index) => ({ element, attributeName, content, index }));\n}\nfunction zip(left, right) {\n    const length = Math.max(left.length, right.length);\n    return Array.from({ length }, (_, index) => [left[index], right[index]]);\n}\nfunction tokensAreEqual(left, right) {\n    return left && right && left.index == right.index && left.content == right.content;\n}\n\nclass ValueListObserver {\n    constructor(element, attributeName, delegate) {\n        this.tokenListObserver = new TokenListObserver(element, attributeName, this);\n        this.delegate = delegate;\n        this.parseResultsByToken = new WeakMap();\n        this.valuesByTokenByElement = new WeakMap();\n    }\n    get started() {\n        return this.tokenListObserver.started;\n    }\n    start() {\n        this.tokenListObserver.start();\n    }\n    stop() {\n        this.tokenListObserver.stop();\n    }\n    refresh() {\n        this.tokenListObserver.refresh();\n    }\n    get element() {\n        return this.tokenListObserver.element;\n    }\n    get attributeName() {\n        return this.tokenListObserver.attributeName;\n    }\n    tokenMatched(token) {\n        const { element } = token;\n        const { value } = this.fetchParseResultForToken(token);\n        if (value) {\n            this.fetchValuesByTokenForElement(element).set(token, value);\n            this.delegate.elementMatchedValue(element, value);\n        }\n    }\n    tokenUnmatched(token) {\n        const { element } = token;\n        const { value } = this.fetchParseResultForToken(token);\n        if (value) {\n            this.fetchValuesByTokenForElement(element).delete(token);\n            this.delegate.elementUnmatchedValue(element, value);\n        }\n    }\n    fetchParseResultForToken(token) {\n        let parseResult = this.parseResultsByToken.get(token);\n        if (!parseResult) {\n            parseResult = this.parseToken(token);\n            this.parseResultsByToken.set(token, parseResult);\n        }\n        return parseResult;\n    }\n    fetchValuesByTokenForElement(element) {\n        let valuesByToken = this.valuesByTokenByElement.get(element);\n        if (!valuesByToken) {\n            valuesByToken = new Map();\n            this.valuesByTokenByElement.set(element, valuesByToken);\n        }\n        return valuesByToken;\n    }\n    parseToken(token) {\n        try {\n            const value = this.delegate.parseValueForToken(token);\n            return { value };\n        }\n        catch (error) {\n            return { error };\n        }\n    }\n}\n\nclass BindingObserver {\n    constructor(context, delegate) {\n        this.context = context;\n        this.delegate = delegate;\n        this.bindingsByAction = new Map();\n    }\n    start() {\n        if (!this.valueListObserver) {\n            this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this);\n            this.valueListObserver.start();\n        }\n    }\n    stop() {\n        if (this.valueListObserver) {\n            this.valueListObserver.stop();\n            delete this.valueListObserver;\n            this.disconnectAllActions();\n        }\n    }\n    get element() {\n        return this.context.element;\n    }\n    get identifier() {\n        return this.context.identifier;\n    }\n    get actionAttribute() {\n        return this.schema.actionAttribute;\n    }\n    get schema() {\n        return this.context.schema;\n    }\n    get bindings() {\n        return Array.from(this.bindingsByAction.values());\n    }\n    connectAction(action) {\n        const binding = new Binding(this.context, action);\n        this.bindingsByAction.set(action, binding);\n        this.delegate.bindingConnected(binding);\n    }\n    disconnectAction(action) {\n        const binding = this.bindingsByAction.get(action);\n        if (binding) {\n            this.bindingsByAction.delete(action);\n            this.delegate.bindingDisconnected(binding);\n        }\n    }\n    disconnectAllActions() {\n        this.bindings.forEach((binding) => this.delegate.bindingDisconnected(binding, true));\n        this.bindingsByAction.clear();\n    }\n    parseValueForToken(token) {\n        const action = Action.forToken(token, this.schema);\n        if (action.identifier == this.identifier) {\n            return action;\n        }\n    }\n    elementMatchedValue(element, action) {\n        this.connectAction(action);\n    }\n    elementUnmatchedValue(element, action) {\n        this.disconnectAction(action);\n    }\n}\n\nclass ValueObserver {\n    constructor(context, receiver) {\n        this.context = context;\n        this.receiver = receiver;\n        this.stringMapObserver = new StringMapObserver(this.element, this);\n        this.valueDescriptorMap = this.controller.valueDescriptorMap;\n    }\n    start() {\n        this.stringMapObserver.start();\n        this.invokeChangedCallbacksForDefaultValues();\n    }\n    stop() {\n        this.stringMapObserver.stop();\n    }\n    get element() {\n        return this.context.element;\n    }\n    get controller() {\n        return this.context.controller;\n    }\n    getStringMapKeyForAttribute(attributeName) {\n        if (attributeName in this.valueDescriptorMap) {\n            return this.valueDescriptorMap[attributeName].name;\n        }\n    }\n    stringMapKeyAdded(key, attributeName) {\n        const descriptor = this.valueDescriptorMap[attributeName];\n        if (!this.hasValue(key)) {\n            this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue));\n        }\n    }\n    stringMapValueChanged(value, name, oldValue) {\n        const descriptor = this.valueDescriptorNameMap[name];\n        if (value === null)\n            return;\n        if (oldValue === null) {\n            oldValue = descriptor.writer(descriptor.defaultValue);\n        }\n        this.invokeChangedCallback(name, value, oldValue);\n    }\n    stringMapKeyRemoved(key, attributeName, oldValue) {\n        const descriptor = this.valueDescriptorNameMap[key];\n        if (this.hasValue(key)) {\n            this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue);\n        }\n        else {\n            this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue);\n        }\n    }\n    invokeChangedCallbacksForDefaultValues() {\n        for (const { key, name, defaultValue, writer } of this.valueDescriptors) {\n            if (defaultValue != undefined && !this.controller.data.has(key)) {\n                this.invokeChangedCallback(name, writer(defaultValue), undefined);\n            }\n        }\n    }\n    invokeChangedCallback(name, rawValue, rawOldValue) {\n        const changedMethodName = `${name}Changed`;\n        const changedMethod = this.receiver[changedMethodName];\n        if (typeof changedMethod == \"function\") {\n            const descriptor = this.valueDescriptorNameMap[name];\n            try {\n                const value = descriptor.reader(rawValue);\n                let oldValue = rawOldValue;\n                if (rawOldValue) {\n                    oldValue = descriptor.reader(rawOldValue);\n                }\n                changedMethod.call(this.receiver, value, oldValue);\n            }\n            catch (error) {\n                if (error instanceof TypeError) {\n                    error.message = `Stimulus Value \"${this.context.identifier}.${descriptor.name}\" - ${error.message}`;\n                }\n                throw error;\n            }\n        }\n    }\n    get valueDescriptors() {\n        const { valueDescriptorMap } = this;\n        return Object.keys(valueDescriptorMap).map((key) => valueDescriptorMap[key]);\n    }\n    get valueDescriptorNameMap() {\n        const descriptors = {};\n        Object.keys(this.valueDescriptorMap).forEach((key) => {\n            const descriptor = this.valueDescriptorMap[key];\n            descriptors[descriptor.name] = descriptor;\n        });\n        return descriptors;\n    }\n    hasValue(attributeName) {\n        const descriptor = this.valueDescriptorNameMap[attributeName];\n        const hasMethodName = `has${capitalize(descriptor.name)}`;\n        return this.receiver[hasMethodName];\n    }\n}\n\nclass TargetObserver {\n    constructor(context, delegate) {\n        this.context = context;\n        this.delegate = delegate;\n        this.targetsByName = new Multimap();\n    }\n    start() {\n        if (!this.tokenListObserver) {\n            this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this);\n            this.tokenListObserver.start();\n        }\n    }\n    stop() {\n        if (this.tokenListObserver) {\n            this.disconnectAllTargets();\n            this.tokenListObserver.stop();\n            delete this.tokenListObserver;\n        }\n    }\n    tokenMatched({ element, content: name }) {\n        if (this.scope.containsElement(element)) {\n            this.connectTarget(element, name);\n        }\n    }\n    tokenUnmatched({ element, content: name }) {\n        this.disconnectTarget(element, name);\n    }\n    connectTarget(element, name) {\n        var _a;\n        if (!this.targetsByName.has(name, element)) {\n            this.targetsByName.add(name, element);\n            (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetConnected(element, name));\n        }\n    }\n    disconnectTarget(element, name) {\n        var _a;\n        if (this.targetsByName.has(name, element)) {\n            this.targetsByName.delete(name, element);\n            (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetDisconnected(element, name));\n        }\n    }\n    disconnectAllTargets() {\n        for (const name of this.targetsByName.keys) {\n            for (const element of this.targetsByName.getValuesForKey(name)) {\n                this.disconnectTarget(element, name);\n            }\n        }\n    }\n    get attributeName() {\n        return `data-${this.context.identifier}-target`;\n    }\n    get element() {\n        return this.context.element;\n    }\n    get scope() {\n        return this.context.scope;\n    }\n}\n\nfunction readInheritableStaticArrayValues(constructor, propertyName) {\n    const ancestors = getAncestorsForConstructor(constructor);\n    return Array.from(ancestors.reduce((values, constructor) => {\n        getOwnStaticArrayValues(constructor, propertyName).forEach((name) => values.add(name));\n        return values;\n    }, new Set()));\n}\nfunction readInheritableStaticObjectPairs(constructor, propertyName) {\n    const ancestors = getAncestorsForConstructor(constructor);\n    return ancestors.reduce((pairs, constructor) => {\n        pairs.push(...getOwnStaticObjectPairs(constructor, propertyName));\n        return pairs;\n    }, []);\n}\nfunction getAncestorsForConstructor(constructor) {\n    const ancestors = [];\n    while (constructor) {\n        ancestors.push(constructor);\n        constructor = Object.getPrototypeOf(constructor);\n    }\n    return ancestors.reverse();\n}\nfunction getOwnStaticArrayValues(constructor, propertyName) {\n    const definition = constructor[propertyName];\n    return Array.isArray(definition) ? definition : [];\n}\nfunction getOwnStaticObjectPairs(constructor, propertyName) {\n    const definition = constructor[propertyName];\n    return definition ? Object.keys(definition).map((key) => [key, definition[key]]) : [];\n}\n\nclass OutletObserver {\n    constructor(context, delegate) {\n        this.started = false;\n        this.context = context;\n        this.delegate = delegate;\n        this.outletsByName = new Multimap();\n        this.outletElementsByName = new Multimap();\n        this.selectorObserverMap = new Map();\n        this.attributeObserverMap = new Map();\n    }\n    start() {\n        if (!this.started) {\n            this.outletDefinitions.forEach((outletName) => {\n                this.setupSelectorObserverForOutlet(outletName);\n                this.setupAttributeObserverForOutlet(outletName);\n            });\n            this.started = true;\n            this.dependentContexts.forEach((context) => context.refresh());\n        }\n    }\n    refresh() {\n        this.selectorObserverMap.forEach((observer) => observer.refresh());\n        this.attributeObserverMap.forEach((observer) => observer.refresh());\n    }\n    stop() {\n        if (this.started) {\n            this.started = false;\n            this.disconnectAllOutlets();\n            this.stopSelectorObservers();\n            this.stopAttributeObservers();\n        }\n    }\n    stopSelectorObservers() {\n        if (this.selectorObserverMap.size > 0) {\n            this.selectorObserverMap.forEach((observer) => observer.stop());\n            this.selectorObserverMap.clear();\n        }\n    }\n    stopAttributeObservers() {\n        if (this.attributeObserverMap.size > 0) {\n            this.attributeObserverMap.forEach((observer) => observer.stop());\n            this.attributeObserverMap.clear();\n        }\n    }\n    selectorMatched(element, _selector, { outletName }) {\n        const outlet = this.getOutlet(element, outletName);\n        if (outlet) {\n            this.connectOutlet(outlet, element, outletName);\n        }\n    }\n    selectorUnmatched(element, _selector, { outletName }) {\n        const outlet = this.getOutletFromMap(element, outletName);\n        if (outlet) {\n            this.disconnectOutlet(outlet, element, outletName);\n        }\n    }\n    selectorMatchElement(element, { outletName }) {\n        const selector = this.selector(outletName);\n        const hasOutlet = this.hasOutlet(element, outletName);\n        const hasOutletController = element.matches(`[${this.schema.controllerAttribute}~=${outletName}]`);\n        if (selector) {\n            return hasOutlet && hasOutletController && element.matches(selector);\n        }\n        else {\n            return false;\n        }\n    }\n    elementMatchedAttribute(_element, attributeName) {\n        const outletName = this.getOutletNameFromOutletAttributeName(attributeName);\n        if (outletName) {\n            this.updateSelectorObserverForOutlet(outletName);\n        }\n    }\n    elementAttributeValueChanged(_element, attributeName) {\n        const outletName = this.getOutletNameFromOutletAttributeName(attributeName);\n        if (outletName) {\n            this.updateSelectorObserverForOutlet(outletName);\n        }\n    }\n    elementUnmatchedAttribute(_element, attributeName) {\n        const outletName = this.getOutletNameFromOutletAttributeName(attributeName);\n        if (outletName) {\n            this.updateSelectorObserverForOutlet(outletName);\n        }\n    }\n    connectOutlet(outlet, element, outletName) {\n        var _a;\n        if (!this.outletElementsByName.has(outletName, element)) {\n            this.outletsByName.add(outletName, outlet);\n            this.outletElementsByName.add(outletName, element);\n            (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletConnected(outlet, element, outletName));\n        }\n    }\n    disconnectOutlet(outlet, element, outletName) {\n        var _a;\n        if (this.outletElementsByName.has(outletName, element)) {\n            this.outletsByName.delete(outletName, outlet);\n            this.outletElementsByName.delete(outletName, element);\n            (_a = this.selectorObserverMap\n                .get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletDisconnected(outlet, element, outletName));\n        }\n    }\n    disconnectAllOutlets() {\n        for (const outletName of this.outletElementsByName.keys) {\n            for (const element of this.outletElementsByName.getValuesForKey(outletName)) {\n                for (const outlet of this.outletsByName.getValuesForKey(outletName)) {\n                    this.disconnectOutlet(outlet, element, outletName);\n                }\n            }\n        }\n    }\n    updateSelectorObserverForOutlet(outletName) {\n        const observer = this.selectorObserverMap.get(outletName);\n        if (observer) {\n            observer.selector = this.selector(outletName);\n        }\n    }\n    setupSelectorObserverForOutlet(outletName) {\n        const selector = this.selector(outletName);\n        const selectorObserver = new SelectorObserver(document.body, selector, this, { outletName });\n        this.selectorObserverMap.set(outletName, selectorObserver);\n        selectorObserver.start();\n    }\n    setupAttributeObserverForOutlet(outletName) {\n        const attributeName = this.attributeNameForOutletName(outletName);\n        const attributeObserver = new AttributeObserver(this.scope.element, attributeName, this);\n        this.attributeObserverMap.set(outletName, attributeObserver);\n        attributeObserver.start();\n    }\n    selector(outletName) {\n        return this.scope.outlets.getSelectorForOutletName(outletName);\n    }\n    attributeNameForOutletName(outletName) {\n        return this.scope.schema.outletAttributeForScope(this.identifier, outletName);\n    }\n    getOutletNameFromOutletAttributeName(attributeName) {\n        return this.outletDefinitions.find((outletName) => this.attributeNameForOutletName(outletName) === attributeName);\n    }\n    get outletDependencies() {\n        const dependencies = new Multimap();\n        this.router.modules.forEach((module) => {\n            const constructor = module.definition.controllerConstructor;\n            const outlets = readInheritableStaticArrayValues(constructor, \"outlets\");\n            outlets.forEach((outlet) => dependencies.add(outlet, module.identifier));\n        });\n        return dependencies;\n    }\n    get outletDefinitions() {\n        return this.outletDependencies.getKeysForValue(this.identifier);\n    }\n    get dependentControllerIdentifiers() {\n        return this.outletDependencies.getValuesForKey(this.identifier);\n    }\n    get dependentContexts() {\n        const identifiers = this.dependentControllerIdentifiers;\n        return this.router.contexts.filter((context) => identifiers.includes(context.identifier));\n    }\n    hasOutlet(element, outletName) {\n        return !!this.getOutlet(element, outletName) || !!this.getOutletFromMap(element, outletName);\n    }\n    getOutlet(element, outletName) {\n        return this.application.getControllerForElementAndIdentifier(element, outletName);\n    }\n    getOutletFromMap(element, outletName) {\n        return this.outletsByName.getValuesForKey(outletName).find((outlet) => outlet.element === element);\n    }\n    get scope() {\n        return this.context.scope;\n    }\n    get schema() {\n        return this.context.schema;\n    }\n    get identifier() {\n        return this.context.identifier;\n    }\n    get application() {\n        return this.context.application;\n    }\n    get router() {\n        return this.application.router;\n    }\n}\n\nclass Context {\n    constructor(module, scope) {\n        this.logDebugActivity = (functionName, detail = {}) => {\n            const { identifier, controller, element } = this;\n            detail = Object.assign({ identifier, controller, element }, detail);\n            this.application.logDebugActivity(this.identifier, functionName, detail);\n        };\n        this.module = module;\n        this.scope = scope;\n        this.controller = new module.controllerConstructor(this);\n        this.bindingObserver = new BindingObserver(this, this.dispatcher);\n        this.valueObserver = new ValueObserver(this, this.controller);\n        this.targetObserver = new TargetObserver(this, this);\n        this.outletObserver = new OutletObserver(this, this);\n        try {\n            this.controller.initialize();\n            this.logDebugActivity(\"initialize\");\n        }\n        catch (error) {\n            this.handleError(error, \"initializing controller\");\n        }\n    }\n    connect() {\n        this.bindingObserver.start();\n        this.valueObserver.start();\n        this.targetObserver.start();\n        this.outletObserver.start();\n        try {\n            this.controller.connect();\n            this.logDebugActivity(\"connect\");\n        }\n        catch (error) {\n            this.handleError(error, \"connecting controller\");\n        }\n    }\n    refresh() {\n        this.outletObserver.refresh();\n    }\n    disconnect() {\n        try {\n            this.controller.disconnect();\n            this.logDebugActivity(\"disconnect\");\n        }\n        catch (error) {\n            this.handleError(error, \"disconnecting controller\");\n        }\n        this.outletObserver.stop();\n        this.targetObserver.stop();\n        this.valueObserver.stop();\n        this.bindingObserver.stop();\n    }\n    get application() {\n        return this.module.application;\n    }\n    get identifier() {\n        return this.module.identifier;\n    }\n    get schema() {\n        return this.application.schema;\n    }\n    get dispatcher() {\n        return this.application.dispatcher;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get parentElement() {\n        return this.element.parentElement;\n    }\n    handleError(error, message, detail = {}) {\n        const { identifier, controller, element } = this;\n        detail = Object.assign({ identifier, controller, element }, detail);\n        this.application.handleError(error, `Error ${message}`, detail);\n    }\n    targetConnected(element, name) {\n        this.invokeControllerMethod(`${name}TargetConnected`, element);\n    }\n    targetDisconnected(element, name) {\n        this.invokeControllerMethod(`${name}TargetDisconnected`, element);\n    }\n    outletConnected(outlet, element, name) {\n        this.invokeControllerMethod(`${namespaceCamelize(name)}OutletConnected`, outlet, element);\n    }\n    outletDisconnected(outlet, element, name) {\n        this.invokeControllerMethod(`${namespaceCamelize(name)}OutletDisconnected`, outlet, element);\n    }\n    invokeControllerMethod(methodName, ...args) {\n        const controller = this.controller;\n        if (typeof controller[methodName] == \"function\") {\n            controller[methodName](...args);\n        }\n    }\n}\n\nfunction bless(constructor) {\n    return shadow(constructor, getBlessedProperties(constructor));\n}\nfunction shadow(constructor, properties) {\n    const shadowConstructor = extend(constructor);\n    const shadowProperties = getShadowProperties(constructor.prototype, properties);\n    Object.defineProperties(shadowConstructor.prototype, shadowProperties);\n    return shadowConstructor;\n}\nfunction getBlessedProperties(constructor) {\n    const blessings = readInheritableStaticArrayValues(constructor, \"blessings\");\n    return blessings.reduce((blessedProperties, blessing) => {\n        const properties = blessing(constructor);\n        for (const key in properties) {\n            const descriptor = blessedProperties[key] || {};\n            blessedProperties[key] = Object.assign(descriptor, properties[key]);\n        }\n        return blessedProperties;\n    }, {});\n}\nfunction getShadowProperties(prototype, properties) {\n    return getOwnKeys(properties).reduce((shadowProperties, key) => {\n        const descriptor = getShadowedDescriptor(prototype, properties, key);\n        if (descriptor) {\n            Object.assign(shadowProperties, { [key]: descriptor });\n        }\n        return shadowProperties;\n    }, {});\n}\nfunction getShadowedDescriptor(prototype, properties, key) {\n    const shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype, key);\n    const shadowedByValue = shadowingDescriptor && \"value\" in shadowingDescriptor;\n    if (!shadowedByValue) {\n        const descriptor = Object.getOwnPropertyDescriptor(properties, key).value;\n        if (shadowingDescriptor) {\n            descriptor.get = shadowingDescriptor.get || descriptor.get;\n            descriptor.set = shadowingDescriptor.set || descriptor.set;\n        }\n        return descriptor;\n    }\n}\nconst getOwnKeys = (() => {\n    if (typeof Object.getOwnPropertySymbols == \"function\") {\n        return (object) => [...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)];\n    }\n    else {\n        return Object.getOwnPropertyNames;\n    }\n})();\nconst extend = (() => {\n    function extendWithReflect(constructor) {\n        function extended() {\n            return Reflect.construct(constructor, arguments, new.target);\n        }\n        extended.prototype = Object.create(constructor.prototype, {\n            constructor: { value: extended },\n        });\n        Reflect.setPrototypeOf(extended, constructor);\n        return extended;\n    }\n    function testReflectExtension() {\n        const a = function () {\n            this.a.call(this);\n        };\n        const b = extendWithReflect(a);\n        b.prototype.a = function () { };\n        return new b();\n    }\n    try {\n        testReflectExtension();\n        return extendWithReflect;\n    }\n    catch (error) {\n        return (constructor) => class extended extends constructor {\n        };\n    }\n})();\n\nfunction blessDefinition(definition) {\n    return {\n        identifier: definition.identifier,\n        controllerConstructor: bless(definition.controllerConstructor),\n    };\n}\n\nclass Module {\n    constructor(application, definition) {\n        this.application = application;\n        this.definition = blessDefinition(definition);\n        this.contextsByScope = new WeakMap();\n        this.connectedContexts = new Set();\n    }\n    get identifier() {\n        return this.definition.identifier;\n    }\n    get controllerConstructor() {\n        return this.definition.controllerConstructor;\n    }\n    get contexts() {\n        return Array.from(this.connectedContexts);\n    }\n    connectContextForScope(scope) {\n        const context = this.fetchContextForScope(scope);\n        this.connectedContexts.add(context);\n        context.connect();\n    }\n    disconnectContextForScope(scope) {\n        const context = this.contextsByScope.get(scope);\n        if (context) {\n            this.connectedContexts.delete(context);\n            context.disconnect();\n        }\n    }\n    fetchContextForScope(scope) {\n        let context = this.contextsByScope.get(scope);\n        if (!context) {\n            context = new Context(this, scope);\n            this.contextsByScope.set(scope, context);\n        }\n        return context;\n    }\n}\n\nclass ClassMap {\n    constructor(scope) {\n        this.scope = scope;\n    }\n    has(name) {\n        return this.data.has(this.getDataKey(name));\n    }\n    get(name) {\n        return this.getAll(name)[0];\n    }\n    getAll(name) {\n        const tokenString = this.data.get(this.getDataKey(name)) || \"\";\n        return tokenize(tokenString);\n    }\n    getAttributeName(name) {\n        return this.data.getAttributeNameForKey(this.getDataKey(name));\n    }\n    getDataKey(name) {\n        return `${name}-class`;\n    }\n    get data() {\n        return this.scope.data;\n    }\n}\n\nclass DataMap {\n    constructor(scope) {\n        this.scope = scope;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get identifier() {\n        return this.scope.identifier;\n    }\n    get(key) {\n        const name = this.getAttributeNameForKey(key);\n        return this.element.getAttribute(name);\n    }\n    set(key, value) {\n        const name = this.getAttributeNameForKey(key);\n        this.element.setAttribute(name, value);\n        return this.get(key);\n    }\n    has(key) {\n        const name = this.getAttributeNameForKey(key);\n        return this.element.hasAttribute(name);\n    }\n    delete(key) {\n        if (this.has(key)) {\n            const name = this.getAttributeNameForKey(key);\n            this.element.removeAttribute(name);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    getAttributeNameForKey(key) {\n        return `data-${this.identifier}-${dasherize(key)}`;\n    }\n}\n\nclass Guide {\n    constructor(logger) {\n        this.warnedKeysByObject = new WeakMap();\n        this.logger = logger;\n    }\n    warn(object, key, message) {\n        let warnedKeys = this.warnedKeysByObject.get(object);\n        if (!warnedKeys) {\n            warnedKeys = new Set();\n            this.warnedKeysByObject.set(object, warnedKeys);\n        }\n        if (!warnedKeys.has(key)) {\n            warnedKeys.add(key);\n            this.logger.warn(message, object);\n        }\n    }\n}\n\nfunction attributeValueContainsToken(attributeName, token) {\n    return `[${attributeName}~=\"${token}\"]`;\n}\n\nclass TargetSet {\n    constructor(scope) {\n        this.scope = scope;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get identifier() {\n        return this.scope.identifier;\n    }\n    get schema() {\n        return this.scope.schema;\n    }\n    has(targetName) {\n        return this.find(targetName) != null;\n    }\n    find(...targetNames) {\n        return targetNames.reduce((target, targetName) => target || this.findTarget(targetName) || this.findLegacyTarget(targetName), undefined);\n    }\n    findAll(...targetNames) {\n        return targetNames.reduce((targets, targetName) => [\n            ...targets,\n            ...this.findAllTargets(targetName),\n            ...this.findAllLegacyTargets(targetName),\n        ], []);\n    }\n    findTarget(targetName) {\n        const selector = this.getSelectorForTargetName(targetName);\n        return this.scope.findElement(selector);\n    }\n    findAllTargets(targetName) {\n        const selector = this.getSelectorForTargetName(targetName);\n        return this.scope.findAllElements(selector);\n    }\n    getSelectorForTargetName(targetName) {\n        const attributeName = this.schema.targetAttributeForScope(this.identifier);\n        return attributeValueContainsToken(attributeName, targetName);\n    }\n    findLegacyTarget(targetName) {\n        const selector = this.getLegacySelectorForTargetName(targetName);\n        return this.deprecate(this.scope.findElement(selector), targetName);\n    }\n    findAllLegacyTargets(targetName) {\n        const selector = this.getLegacySelectorForTargetName(targetName);\n        return this.scope.findAllElements(selector).map((element) => this.deprecate(element, targetName));\n    }\n    getLegacySelectorForTargetName(targetName) {\n        const targetDescriptor = `${this.identifier}.${targetName}`;\n        return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor);\n    }\n    deprecate(element, targetName) {\n        if (element) {\n            const { identifier } = this;\n            const attributeName = this.schema.targetAttribute;\n            const revisedAttributeName = this.schema.targetAttributeForScope(identifier);\n            this.guide.warn(element, `target:${targetName}`, `Please replace ${attributeName}=\"${identifier}.${targetName}\" with ${revisedAttributeName}=\"${targetName}\". ` +\n                `The ${attributeName} attribute is deprecated and will be removed in a future version of Stimulus.`);\n        }\n        return element;\n    }\n    get guide() {\n        return this.scope.guide;\n    }\n}\n\nclass OutletSet {\n    constructor(scope, controllerElement) {\n        this.scope = scope;\n        this.controllerElement = controllerElement;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get identifier() {\n        return this.scope.identifier;\n    }\n    get schema() {\n        return this.scope.schema;\n    }\n    has(outletName) {\n        return this.find(outletName) != null;\n    }\n    find(...outletNames) {\n        return outletNames.reduce((outlet, outletName) => outlet || this.findOutlet(outletName), undefined);\n    }\n    findAll(...outletNames) {\n        return outletNames.reduce((outlets, outletName) => [...outlets, ...this.findAllOutlets(outletName)], []);\n    }\n    getSelectorForOutletName(outletName) {\n        const attributeName = this.schema.outletAttributeForScope(this.identifier, outletName);\n        return this.controllerElement.getAttribute(attributeName);\n    }\n    findOutlet(outletName) {\n        const selector = this.getSelectorForOutletName(outletName);\n        if (selector)\n            return this.findElement(selector, outletName);\n    }\n    findAllOutlets(outletName) {\n        const selector = this.getSelectorForOutletName(outletName);\n        return selector ? this.findAllElements(selector, outletName) : [];\n    }\n    findElement(selector, outletName) {\n        const elements = this.scope.queryElements(selector);\n        return elements.filter((element) => this.matchesElement(element, selector, outletName))[0];\n    }\n    findAllElements(selector, outletName) {\n        const elements = this.scope.queryElements(selector);\n        return elements.filter((element) => this.matchesElement(element, selector, outletName));\n    }\n    matchesElement(element, selector, outletName) {\n        const controllerAttribute = element.getAttribute(this.scope.schema.controllerAttribute) || \"\";\n        return element.matches(selector) && controllerAttribute.split(\" \").includes(outletName);\n    }\n}\n\nclass Scope {\n    constructor(schema, element, identifier, logger) {\n        this.targets = new TargetSet(this);\n        this.classes = new ClassMap(this);\n        this.data = new DataMap(this);\n        this.containsElement = (element) => {\n            return element.closest(this.controllerSelector) === this.element;\n        };\n        this.schema = schema;\n        this.element = element;\n        this.identifier = identifier;\n        this.guide = new Guide(logger);\n        this.outlets = new OutletSet(this.documentScope, element);\n    }\n    findElement(selector) {\n        return this.element.matches(selector) ? this.element : this.queryElements(selector).find(this.containsElement);\n    }\n    findAllElements(selector) {\n        return [\n            ...(this.element.matches(selector) ? [this.element] : []),\n            ...this.queryElements(selector).filter(this.containsElement),\n        ];\n    }\n    queryElements(selector) {\n        return Array.from(this.element.querySelectorAll(selector));\n    }\n    get controllerSelector() {\n        return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier);\n    }\n    get isDocumentScope() {\n        return this.element === document.documentElement;\n    }\n    get documentScope() {\n        return this.isDocumentScope\n            ? this\n            : new Scope(this.schema, document.documentElement, this.identifier, this.guide.logger);\n    }\n}\n\nclass ScopeObserver {\n    constructor(element, schema, delegate) {\n        this.element = element;\n        this.schema = schema;\n        this.delegate = delegate;\n        this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this);\n        this.scopesByIdentifierByElement = new WeakMap();\n        this.scopeReferenceCounts = new WeakMap();\n    }\n    start() {\n        this.valueListObserver.start();\n    }\n    stop() {\n        this.valueListObserver.stop();\n    }\n    get controllerAttribute() {\n        return this.schema.controllerAttribute;\n    }\n    parseValueForToken(token) {\n        const { element, content: identifier } = token;\n        return this.parseValueForElementAndIdentifier(element, identifier);\n    }\n    parseValueForElementAndIdentifier(element, identifier) {\n        const scopesByIdentifier = this.fetchScopesByIdentifierForElement(element);\n        let scope = scopesByIdentifier.get(identifier);\n        if (!scope) {\n            scope = this.delegate.createScopeForElementAndIdentifier(element, identifier);\n            scopesByIdentifier.set(identifier, scope);\n        }\n        return scope;\n    }\n    elementMatchedValue(element, value) {\n        const referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1;\n        this.scopeReferenceCounts.set(value, referenceCount);\n        if (referenceCount == 1) {\n            this.delegate.scopeConnected(value);\n        }\n    }\n    elementUnmatchedValue(element, value) {\n        const referenceCount = this.scopeReferenceCounts.get(value);\n        if (referenceCount) {\n            this.scopeReferenceCounts.set(value, referenceCount - 1);\n            if (referenceCount == 1) {\n                this.delegate.scopeDisconnected(value);\n            }\n        }\n    }\n    fetchScopesByIdentifierForElement(element) {\n        let scopesByIdentifier = this.scopesByIdentifierByElement.get(element);\n        if (!scopesByIdentifier) {\n            scopesByIdentifier = new Map();\n            this.scopesByIdentifierByElement.set(element, scopesByIdentifier);\n        }\n        return scopesByIdentifier;\n    }\n}\n\nclass Router {\n    constructor(application) {\n        this.application = application;\n        this.scopeObserver = new ScopeObserver(this.element, this.schema, this);\n        this.scopesByIdentifier = new Multimap();\n        this.modulesByIdentifier = new Map();\n    }\n    get element() {\n        return this.application.element;\n    }\n    get schema() {\n        return this.application.schema;\n    }\n    get logger() {\n        return this.application.logger;\n    }\n    get controllerAttribute() {\n        return this.schema.controllerAttribute;\n    }\n    get modules() {\n        return Array.from(this.modulesByIdentifier.values());\n    }\n    get contexts() {\n        return this.modules.reduce((contexts, module) => contexts.concat(module.contexts), []);\n    }\n    start() {\n        this.scopeObserver.start();\n    }\n    stop() {\n        this.scopeObserver.stop();\n    }\n    loadDefinition(definition) {\n        this.unloadIdentifier(definition.identifier);\n        const module = new Module(this.application, definition);\n        this.connectModule(module);\n        const afterLoad = definition.controllerConstructor.afterLoad;\n        if (afterLoad) {\n            afterLoad.call(definition.controllerConstructor, definition.identifier, this.application);\n        }\n    }\n    unloadIdentifier(identifier) {\n        const module = this.modulesByIdentifier.get(identifier);\n        if (module) {\n            this.disconnectModule(module);\n        }\n    }\n    getContextForElementAndIdentifier(element, identifier) {\n        const module = this.modulesByIdentifier.get(identifier);\n        if (module) {\n            return module.contexts.find((context) => context.element == element);\n        }\n    }\n    proposeToConnectScopeForElementAndIdentifier(element, identifier) {\n        const scope = this.scopeObserver.parseValueForElementAndIdentifier(element, identifier);\n        if (scope) {\n            this.scopeObserver.elementMatchedValue(scope.element, scope);\n        }\n        else {\n            console.error(`Couldn't find or create scope for identifier: \"${identifier}\" and element:`, element);\n        }\n    }\n    handleError(error, message, detail) {\n        this.application.handleError(error, message, detail);\n    }\n    createScopeForElementAndIdentifier(element, identifier) {\n        return new Scope(this.schema, element, identifier, this.logger);\n    }\n    scopeConnected(scope) {\n        this.scopesByIdentifier.add(scope.identifier, scope);\n        const module = this.modulesByIdentifier.get(scope.identifier);\n        if (module) {\n            module.connectContextForScope(scope);\n        }\n    }\n    scopeDisconnected(scope) {\n        this.scopesByIdentifier.delete(scope.identifier, scope);\n        const module = this.modulesByIdentifier.get(scope.identifier);\n        if (module) {\n            module.disconnectContextForScope(scope);\n        }\n    }\n    connectModule(module) {\n        this.modulesByIdentifier.set(module.identifier, module);\n        const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n        scopes.forEach((scope) => module.connectContextForScope(scope));\n    }\n    disconnectModule(module) {\n        this.modulesByIdentifier.delete(module.identifier);\n        const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);\n        scopes.forEach((scope) => module.disconnectContextForScope(scope));\n    }\n}\n\nconst defaultSchema = {\n    controllerAttribute: \"data-controller\",\n    actionAttribute: \"data-action\",\n    targetAttribute: \"data-target\",\n    targetAttributeForScope: (identifier) => `data-${identifier}-target`,\n    outletAttributeForScope: (identifier, outlet) => `data-${identifier}-${outlet}-outlet`,\n    keyMappings: Object.assign(Object.assign({ enter: \"Enter\", tab: \"Tab\", esc: \"Escape\", space: \" \", up: \"ArrowUp\", down: \"ArrowDown\", left: \"ArrowLeft\", right: \"ArrowRight\", home: \"Home\", end: \"End\", page_up: \"PageUp\", page_down: \"PageDown\" }, objectFromEntries(\"abcdefghijklmnopqrstuvwxyz\".split(\"\").map((c) => [c, c]))), objectFromEntries(\"0123456789\".split(\"\").map((n) => [n, n]))),\n};\nfunction objectFromEntries(array) {\n    return array.reduce((memo, [k, v]) => (Object.assign(Object.assign({}, memo), { [k]: v })), {});\n}\n\nclass Application {\n    constructor(element = document.documentElement, schema = defaultSchema) {\n        this.logger = console;\n        this.debug = false;\n        this.logDebugActivity = (identifier, functionName, detail = {}) => {\n            if (this.debug) {\n                this.logFormattedMessage(identifier, functionName, detail);\n            }\n        };\n        this.element = element;\n        this.schema = schema;\n        this.dispatcher = new Dispatcher(this);\n        this.router = new Router(this);\n        this.actionDescriptorFilters = Object.assign({}, defaultActionDescriptorFilters);\n    }\n    static start(element, schema) {\n        const application = new this(element, schema);\n        application.start();\n        return application;\n    }\n    async start() {\n        await domReady();\n        this.logDebugActivity(\"application\", \"starting\");\n        this.dispatcher.start();\n        this.router.start();\n        this.logDebugActivity(\"application\", \"start\");\n    }\n    stop() {\n        this.logDebugActivity(\"application\", \"stopping\");\n        this.dispatcher.stop();\n        this.router.stop();\n        this.logDebugActivity(\"application\", \"stop\");\n    }\n    register(identifier, controllerConstructor) {\n        this.load({ identifier, controllerConstructor });\n    }\n    registerActionOption(name, filter) {\n        this.actionDescriptorFilters[name] = filter;\n    }\n    load(head, ...rest) {\n        const definitions = Array.isArray(head) ? head : [head, ...rest];\n        definitions.forEach((definition) => {\n            if (definition.controllerConstructor.shouldLoad) {\n                this.router.loadDefinition(definition);\n            }\n        });\n    }\n    unload(head, ...rest) {\n        const identifiers = Array.isArray(head) ? head : [head, ...rest];\n        identifiers.forEach((identifier) => this.router.unloadIdentifier(identifier));\n    }\n    get controllers() {\n        return this.router.contexts.map((context) => context.controller);\n    }\n    getControllerForElementAndIdentifier(element, identifier) {\n        const context = this.router.getContextForElementAndIdentifier(element, identifier);\n        return context ? context.controller : null;\n    }\n    handleError(error, message, detail) {\n        var _a;\n        this.logger.error(`%s\\n\\n%o\\n\\n%o`, message, error, detail);\n        (_a = window.onerror) === null || _a === void 0 ? void 0 : _a.call(window, message, \"\", 0, 0, error);\n    }\n    logFormattedMessage(identifier, functionName, detail = {}) {\n        detail = Object.assign({ application: this }, detail);\n        this.logger.groupCollapsed(`${identifier} #${functionName}`);\n        this.logger.log(\"details:\", Object.assign({}, detail));\n        this.logger.groupEnd();\n    }\n}\nfunction domReady() {\n    return new Promise((resolve) => {\n        if (document.readyState == \"loading\") {\n            document.addEventListener(\"DOMContentLoaded\", () => resolve());\n        }\n        else {\n            resolve();\n        }\n    });\n}\n\nfunction ClassPropertiesBlessing(constructor) {\n    const classes = readInheritableStaticArrayValues(constructor, \"classes\");\n    return classes.reduce((properties, classDefinition) => {\n        return Object.assign(properties, propertiesForClassDefinition(classDefinition));\n    }, {});\n}\nfunction propertiesForClassDefinition(key) {\n    return {\n        [`${key}Class`]: {\n            get() {\n                const { classes } = this;\n                if (classes.has(key)) {\n                    return classes.get(key);\n                }\n                else {\n                    const attribute = classes.getAttributeName(key);\n                    throw new Error(`Missing attribute \"${attribute}\"`);\n                }\n            },\n        },\n        [`${key}Classes`]: {\n            get() {\n                return this.classes.getAll(key);\n            },\n        },\n        [`has${capitalize(key)}Class`]: {\n            get() {\n                return this.classes.has(key);\n            },\n        },\n    };\n}\n\nfunction OutletPropertiesBlessing(constructor) {\n    const outlets = readInheritableStaticArrayValues(constructor, \"outlets\");\n    return outlets.reduce((properties, outletDefinition) => {\n        return Object.assign(properties, propertiesForOutletDefinition(outletDefinition));\n    }, {});\n}\nfunction getOutletController(controller, element, identifier) {\n    return controller.application.getControllerForElementAndIdentifier(element, identifier);\n}\nfunction getControllerAndEnsureConnectedScope(controller, element, outletName) {\n    let outletController = getOutletController(controller, element, outletName);\n    if (outletController)\n        return outletController;\n    controller.application.router.proposeToConnectScopeForElementAndIdentifier(element, outletName);\n    outletController = getOutletController(controller, element, outletName);\n    if (outletController)\n        return outletController;\n}\nfunction propertiesForOutletDefinition(name) {\n    const camelizedName = namespaceCamelize(name);\n    return {\n        [`${camelizedName}Outlet`]: {\n            get() {\n                const outletElement = this.outlets.find(name);\n                const selector = this.outlets.getSelectorForOutletName(name);\n                if (outletElement) {\n                    const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);\n                    if (outletController)\n                        return outletController;\n                    throw new Error(`The provided outlet element is missing an outlet controller \"${name}\" instance for host controller \"${this.identifier}\"`);\n                }\n                throw new Error(`Missing outlet element \"${name}\" for host controller \"${this.identifier}\". Stimulus couldn't find a matching outlet element using selector \"${selector}\".`);\n            },\n        },\n        [`${camelizedName}Outlets`]: {\n            get() {\n                const outlets = this.outlets.findAll(name);\n                if (outlets.length > 0) {\n                    return outlets\n                        .map((outletElement) => {\n                        const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);\n                        if (outletController)\n                            return outletController;\n                        console.warn(`The provided outlet element is missing an outlet controller \"${name}\" instance for host controller \"${this.identifier}\"`, outletElement);\n                    })\n                        .filter((controller) => controller);\n                }\n                return [];\n            },\n        },\n        [`${camelizedName}OutletElement`]: {\n            get() {\n                const outletElement = this.outlets.find(name);\n                const selector = this.outlets.getSelectorForOutletName(name);\n                if (outletElement) {\n                    return outletElement;\n                }\n                else {\n                    throw new Error(`Missing outlet element \"${name}\" for host controller \"${this.identifier}\". Stimulus couldn't find a matching outlet element using selector \"${selector}\".`);\n                }\n            },\n        },\n        [`${camelizedName}OutletElements`]: {\n            get() {\n                return this.outlets.findAll(name);\n            },\n        },\n        [`has${capitalize(camelizedName)}Outlet`]: {\n            get() {\n                return this.outlets.has(name);\n            },\n        },\n    };\n}\n\nfunction TargetPropertiesBlessing(constructor) {\n    const targets = readInheritableStaticArrayValues(constructor, \"targets\");\n    return targets.reduce((properties, targetDefinition) => {\n        return Object.assign(properties, propertiesForTargetDefinition(targetDefinition));\n    }, {});\n}\nfunction propertiesForTargetDefinition(name) {\n    return {\n        [`${name}Target`]: {\n            get() {\n                const target = this.targets.find(name);\n                if (target) {\n                    return target;\n                }\n                else {\n                    throw new Error(`Missing target element \"${name}\" for \"${this.identifier}\" controller`);\n                }\n            },\n        },\n        [`${name}Targets`]: {\n            get() {\n                return this.targets.findAll(name);\n            },\n        },\n        [`has${capitalize(name)}Target`]: {\n            get() {\n                return this.targets.has(name);\n            },\n        },\n    };\n}\n\nfunction ValuePropertiesBlessing(constructor) {\n    const valueDefinitionPairs = readInheritableStaticObjectPairs(constructor, \"values\");\n    const propertyDescriptorMap = {\n        valueDescriptorMap: {\n            get() {\n                return valueDefinitionPairs.reduce((result, valueDefinitionPair) => {\n                    const valueDescriptor = parseValueDefinitionPair(valueDefinitionPair, this.identifier);\n                    const attributeName = this.data.getAttributeNameForKey(valueDescriptor.key);\n                    return Object.assign(result, { [attributeName]: valueDescriptor });\n                }, {});\n            },\n        },\n    };\n    return valueDefinitionPairs.reduce((properties, valueDefinitionPair) => {\n        return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair));\n    }, propertyDescriptorMap);\n}\nfunction propertiesForValueDefinitionPair(valueDefinitionPair, controller) {\n    const definition = parseValueDefinitionPair(valueDefinitionPair, controller);\n    const { key, name, reader: read, writer: write } = definition;\n    return {\n        [name]: {\n            get() {\n                const value = this.data.get(key);\n                if (value !== null) {\n                    return read(value);\n                }\n                else {\n                    return definition.defaultValue;\n                }\n            },\n            set(value) {\n                if (value === undefined) {\n                    this.data.delete(key);\n                }\n                else {\n                    this.data.set(key, write(value));\n                }\n            },\n        },\n        [`has${capitalize(name)}`]: {\n            get() {\n                return this.data.has(key) || definition.hasCustomDefaultValue;\n            },\n        },\n    };\n}\nfunction parseValueDefinitionPair([token, typeDefinition], controller) {\n    return valueDescriptorForTokenAndTypeDefinition({\n        controller,\n        token,\n        typeDefinition,\n    });\n}\nfunction parseValueTypeConstant(constant) {\n    switch (constant) {\n        case Array:\n            return \"array\";\n        case Boolean:\n            return \"boolean\";\n        case Number:\n            return \"number\";\n        case Object:\n            return \"object\";\n        case String:\n            return \"string\";\n    }\n}\nfunction parseValueTypeDefault(defaultValue) {\n    switch (typeof defaultValue) {\n        case \"boolean\":\n            return \"boolean\";\n        case \"number\":\n            return \"number\";\n        case \"string\":\n            return \"string\";\n    }\n    if (Array.isArray(defaultValue))\n        return \"array\";\n    if (Object.prototype.toString.call(defaultValue) === \"[object Object]\")\n        return \"object\";\n}\nfunction parseValueTypeObject(payload) {\n    const { controller, token, typeObject } = payload;\n    const hasType = isSomething(typeObject.type);\n    const hasDefault = isSomething(typeObject.default);\n    const fullObject = hasType && hasDefault;\n    const onlyType = hasType && !hasDefault;\n    const onlyDefault = !hasType && hasDefault;\n    const typeFromObject = parseValueTypeConstant(typeObject.type);\n    const typeFromDefaultValue = parseValueTypeDefault(payload.typeObject.default);\n    if (onlyType)\n        return typeFromObject;\n    if (onlyDefault)\n        return typeFromDefaultValue;\n    if (typeFromObject !== typeFromDefaultValue) {\n        const propertyPath = controller ? `${controller}.${token}` : token;\n        throw new Error(`The specified default value for the Stimulus Value \"${propertyPath}\" must match the defined type \"${typeFromObject}\". The provided default value of \"${typeObject.default}\" is of type \"${typeFromDefaultValue}\".`);\n    }\n    if (fullObject)\n        return typeFromObject;\n}\nfunction parseValueTypeDefinition(payload) {\n    const { controller, token, typeDefinition } = payload;\n    const typeObject = { controller, token, typeObject: typeDefinition };\n    const typeFromObject = parseValueTypeObject(typeObject);\n    const typeFromDefaultValue = parseValueTypeDefault(typeDefinition);\n    const typeFromConstant = parseValueTypeConstant(typeDefinition);\n    const type = typeFromObject || typeFromDefaultValue || typeFromConstant;\n    if (type)\n        return type;\n    const propertyPath = controller ? `${controller}.${typeDefinition}` : token;\n    throw new Error(`Unknown value type \"${propertyPath}\" for \"${token}\" value`);\n}\nfunction defaultValueForDefinition(typeDefinition) {\n    const constant = parseValueTypeConstant(typeDefinition);\n    if (constant)\n        return defaultValuesByType[constant];\n    const hasDefault = hasProperty(typeDefinition, \"default\");\n    const hasType = hasProperty(typeDefinition, \"type\");\n    const typeObject = typeDefinition;\n    if (hasDefault)\n        return typeObject.default;\n    if (hasType) {\n        const { type } = typeObject;\n        const constantFromType = parseValueTypeConstant(type);\n        if (constantFromType)\n            return defaultValuesByType[constantFromType];\n    }\n    return typeDefinition;\n}\nfunction valueDescriptorForTokenAndTypeDefinition(payload) {\n    const { token, typeDefinition } = payload;\n    const key = `${dasherize(token)}-value`;\n    const type = parseValueTypeDefinition(payload);\n    return {\n        type,\n        key,\n        name: camelize(key),\n        get defaultValue() {\n            return defaultValueForDefinition(typeDefinition);\n        },\n        get hasCustomDefaultValue() {\n            return parseValueTypeDefault(typeDefinition) !== undefined;\n        },\n        reader: readers[type],\n        writer: writers[type] || writers.default,\n    };\n}\nconst defaultValuesByType = {\n    get array() {\n        return [];\n    },\n    boolean: false,\n    number: 0,\n    get object() {\n        return {};\n    },\n    string: \"\",\n};\nconst readers = {\n    array(value) {\n        const array = JSON.parse(value);\n        if (!Array.isArray(array)) {\n            throw new TypeError(`expected value of type \"array\" but instead got value \"${value}\" of type \"${parseValueTypeDefault(array)}\"`);\n        }\n        return array;\n    },\n    boolean(value) {\n        return !(value == \"0\" || String(value).toLowerCase() == \"false\");\n    },\n    number(value) {\n        return Number(value.replace(/_/g, \"\"));\n    },\n    object(value) {\n        const object = JSON.parse(value);\n        if (object === null || typeof object != \"object\" || Array.isArray(object)) {\n            throw new TypeError(`expected value of type \"object\" but instead got value \"${value}\" of type \"${parseValueTypeDefault(object)}\"`);\n        }\n        return object;\n    },\n    string(value) {\n        return value;\n    },\n};\nconst writers = {\n    default: writeString,\n    array: writeJSON,\n    object: writeJSON,\n};\nfunction writeJSON(value) {\n    return JSON.stringify(value);\n}\nfunction writeString(value) {\n    return `${value}`;\n}\n\nclass Controller {\n    constructor(context) {\n        this.context = context;\n    }\n    static get shouldLoad() {\n        return true;\n    }\n    static afterLoad(_identifier, _application) {\n        return;\n    }\n    get application() {\n        return this.context.application;\n    }\n    get scope() {\n        return this.context.scope;\n    }\n    get element() {\n        return this.scope.element;\n    }\n    get identifier() {\n        return this.scope.identifier;\n    }\n    get targets() {\n        return this.scope.targets;\n    }\n    get outlets() {\n        return this.scope.outlets;\n    }\n    get classes() {\n        return this.scope.classes;\n    }\n    get data() {\n        return this.scope.data;\n    }\n    initialize() {\n    }\n    connect() {\n    }\n    disconnect() {\n    }\n    dispatch(eventName, { target = this.element, detail = {}, prefix = this.identifier, bubbles = true, cancelable = true, } = {}) {\n        const type = prefix ? `${prefix}:${eventName}` : eventName;\n        const event = new CustomEvent(type, { detail, bubbles, cancelable });\n        target.dispatchEvent(event);\n        return event;\n    }\n}\nController.blessings = [\n    ClassPropertiesBlessing,\n    TargetPropertiesBlessing,\n    ValuePropertiesBlessing,\n    OutletPropertiesBlessing,\n];\nController.targets = [];\nController.outlets = [];\nController.values = {};\n\nexport { Application, AttributeObserver, Context, Controller, ElementObserver, IndexedMultimap, Multimap, SelectorObserver, StringMapObserver, TokenListObserver, ValueListObserver, add, defaultSchema, del, fetch, prune };\n"],"names":["EventListener","constructor","eventTarget","eventName","eventOptions","this","unorderedBindings","Set","connect","addEventListener","disconnect","removeEventListener","bindingConnected","binding","add","bindingDisconnected","delete","handleEvent","event","extendedEvent","extendEvent","bindings","immediatePropagationStopped","hasBindings","size","Array","from","sort","left","right","leftIndex","index","rightIndex","stopImmediatePropagation","Object","assign","call","Dispatcher","application","eventListenerMaps","Map","started","start","eventListeners","forEach","eventListener","stop","values","reduce","listeners","map","concat","fetchEventListenerForBinding","clearEventListeners","clearEventListenersForBinding","handleError","error","message","detail","removeMappedEventListenerFor","eventListenerMap","fetchEventListenerMapForEventTarget","cacheKey","fetchEventListener","get","createEventListener","set","parts","keys","key","push","join","defaultActionDescriptorFilters","value","stopPropagation","prevent","preventDefault","self","element","target","descriptorPattern","parseActionDescriptorString","descriptorString","source","trim","matches","match","keyFilter","includes","parseEventTarget","parseEventOptions","identifier","methodName","eventTargetName","window","document","split","options","token","replace","test","stringifyEventTarget","camelize","_","char","toUpperCase","namespaceCamelize","capitalize","charAt","slice","dasherize","toLowerCase","tokenize","isSomething","object","undefined","hasProperty","property","prototype","hasOwnProperty","allModifiers","Action","descriptor","schema","getDefaultEventNameForElement","static","content","toString","eventFilter","shouldIgnoreKeyboardEvent","filters","keyFilterDissatisfied","standardFilter","filter","keyMappings","shouldIgnoreMouseEvent","params","pattern","RegExp","name","attributes","typecast","meta","ctrl","alt","shift","modifier","metaKey","ctrlKey","altKey","shiftKey","defaultEventNames","a","button","form","details","input","e","getAttribute","select","textarea","tagName","Error","JSON","parse","o_O","Binding","context","action","actionEvent","prepareActionEvent","willBeInvokedByEvent","applyEventModifiers","invokeWithEvent","method","controller","actionDescriptorFilters","passes","entries","currentTarget","logDebugActivity","KeyboardEvent","MouseEvent","Element","contains","scope","containsElement","ElementObserver","delegate","mutationObserverInit","childList","subtree","elements","mutationObserver","MutationObserver","mutations","processMutations","observe","refresh","pause","callback","takeRecords","matchElementsInTree","has","removeElement","addElement","mutation","processMutation","type","processAttributeChange","attributeName","processRemovedNodes","removedNodes","processAddedNodes","addedNodes","elementAttributeChanged","matchElement","nodes","node","elementFromNode","processTree","elementIsActive","tree","processor","nodeType","Node","ELEMENT_NODE","isConnected","elementMatched","elementUnmatched","AttributeObserver","elementObserver","selector","hasAttribute","querySelectorAll","elementMatchedAttribute","elementUnmatchedAttribute","elementAttributeValueChanged","fetch","del","prune","Multimap","valuesByKey","sets","hasKey","hasValue","some","getValuesForKey","getKeysForValue","_key","_values","IndexedMultimap","super","keysByValue","SelectorObserver","_selector","matchesByElement","selectorMatchElement","selectorMatched","selectors","selectorUnmatched","_attributeName","matchedBefore","StringMapObserver","stringMap","attributeOldValue","knownAttributeNames","refreshAttribute","oldValue","getStringMapKeyForAttribute","stringMapKeyAdded","stringMapValueChanged","stringMapKeyRemoved","currentAttributeNames","recordedAttributeNames","attribute","TokenListObserver","attributeObserver","tokensByElement","tokensMatched","readTokensForElement","unmatchedTokens","matchedTokens","refreshTokensForElement","tokensUnmatched","tokens","tokenMatched","tokenUnmatched","previousTokens","currentTokens","firstDifferingIndex","zip","findIndex","previousToken","currentToken","tokensAreEqual","tokenString","parseTokenString","length","Math","max","ValueListObserver","tokenListObserver","parseResultsByToken","WeakMap","valuesByTokenByElement","fetchParseResultForToken","fetchValuesByTokenForElement","elementMatchedValue","elementUnmatchedValue","parseResult","parseToken","valuesByToken","parseValueForToken","BindingObserver","bindingsByAction","valueListObserver","actionAttribute","disconnectAllActions","connectAction","disconnectAction","clear","forToken","ValueObserver","receiver","stringMapObserver","valueDescriptorMap","invokeChangedCallbacksForDefaultValues","invokeChangedCallback","writer","defaultValue","valueDescriptorNameMap","valueDescriptors","data","rawValue","rawOldValue","changedMethodName","changedMethod","reader","TypeError","descriptors","hasMethodName","TargetObserver","targetsByName","disconnectAllTargets","connectTarget","disconnectTarget","_a","targetConnected","targetDisconnected","readInheritableStaticArrayValues","propertyName","ancestors","getAncestorsForConstructor","getOwnStaticArrayValues","readInheritableStaticObjectPairs","pairs","getOwnStaticObjectPairs","getPrototypeOf","reverse","definition","isArray","OutletObserver","outletsByName","outletElementsByName","selectorObserverMap","attributeObserverMap","outletDefinitions","outletName","setupSelectorObserverForOutlet","setupAttributeObserverForOutlet","dependentContexts","observer","disconnectAllOutlets","stopSelectorObservers","stopAttributeObservers","outlet","getOutlet","connectOutlet","getOutletFromMap","disconnectOutlet","hasOutlet","hasOutletController","controllerAttribute","_element","getOutletNameFromOutletAttributeName","updateSelectorObserverForOutlet","outletConnected","outletDisconnected","selectorObserver","body","attributeNameForOutletName","outlets","getSelectorForOutletName","outletAttributeForScope","find","outletDependencies","dependencies","router","modules","module","controllerConstructor","dependentControllerIdentifiers","identifiers","contexts","getControllerForElementAndIdentifier","Context","functionName","bindingObserver","dispatcher","valueObserver","targetObserver","outletObserver","initialize","parentElement","invokeControllerMethod","args","bless","shadow","getBlessedProperties","properties","shadowConstructor","extend","shadowProperties","getShadowProperties","defineProperties","blessings","blessedProperties","blessing","getOwnKeys","getShadowedDescriptor","shadowingDescriptor","getOwnPropertyDescriptor","shadowedByValue","getOwnPropertySymbols","getOwnPropertyNames","extendWithReflect","extended","Reflect","construct","arguments","create","setPrototypeOf","testReflectExtension","b","blessDefinition","Module","contextsByScope","connectedContexts","connectContextForScope","fetchContextForScope","disconnectContextForScope","ClassMap","getDataKey","getAll","getAttributeName","getAttributeNameForKey","DataMap","setAttribute","removeAttribute","Guide","logger","warnedKeysByObject","warn","warnedKeys","attributeValueContainsToken","TargetSet","targetName","targetNames","findTarget","findLegacyTarget","findAll","targets","findAllTargets","findAllLegacyTargets","getSelectorForTargetName","findElement","findAllElements","targetAttributeForScope","getLegacySelectorForTargetName","deprecate","targetDescriptor","targetAttribute","revisedAttributeName","guide","OutletSet","controllerElement","outletNames","findOutlet","findAllOutlets","queryElements","matchesElement","Scope","classes","closest","controllerSelector","documentScope","isDocumentScope","documentElement","ScopeObserver","scopesByIdentifierByElement","scopeReferenceCounts","parseValueForElementAndIdentifier","scopesByIdentifier","fetchScopesByIdentifierForElement","createScopeForElementAndIdentifier","referenceCount","scopeConnected","scopeDisconnected","Router","scopeObserver","modulesByIdentifier","loadDefinition","unloadIdentifier","connectModule","afterLoad","disconnectModule","getContextForElementAndIdentifier","proposeToConnectScopeForElementAndIdentifier","console","scopes","defaultSchema","enter","tab","esc","space","up","down","home","end","page_up","page_down","objectFromEntries","c","n","array","memo","k","v","Application","debug","logFormattedMessage","async","domReady","register","load","registerActionOption","head","rest","definitions","shouldLoad","unload","controllers","onerror","groupCollapsed","log","groupEnd","Promise","resolve","readyState","ClassPropertiesBlessing","classDefinition","propertiesForClassDefinition","OutletPropertiesBlessing","outletDefinition","propertiesForOutletDefinition","getOutletController","getControllerAndEnsureConnectedScope","outletController","camelizedName","outletElement","TargetPropertiesBlessing","targetDefinition","propertiesForTargetDefinition","ValuePropertiesBlessing","valueDefinitionPairs","propertyDescriptorMap","result","valueDefinitionPair","valueDescriptor","parseValueDefinitionPair","propertiesForValueDefinitionPair","read","write","hasCustomDefaultValue","typeDefinition","valueDescriptorForTokenAndTypeDefinition","parseValueTypeConstant","constant","Boolean","Number","String","parseValueTypeDefault","parseValueTypeObject","payload","typeObject","hasType","hasDefault","default","fullObject","onlyType","onlyDefault","typeFromObject","typeFromDefaultValue","propertyPath","parseValueTypeDefinition","typeFromConstant","defaultValueForDefinition","defaultValuesByType","constantFromType","readers","writers","boolean","number","string","writeString","writeJSON","stringify","Controller","_identifier","_application","dispatch","prefix","bubbles","cancelable","CustomEvent","dispatchEvent"],"mappings":"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"}